<?php
/**
 * TokenRequestsApi
 * PHP version 5
 *
 * @category Class
 * @package  TransferTokenClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transfer Token API
 *
 * Transfer token generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: spatel@highwirepress.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TransferTokenClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TransferTokenClient\ApiException;
use TransferTokenClient\Configuration;
use TransferTokenClient\HeaderSelector;
use TransferTokenClient\ObjectSerializer;

/**
 * TokenRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  TransferTokenClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTransferToken
     *
     * Get Transfer Token
     *
     * @param  string $api_key ${service.api.transfer.token.param.api-key} (required)
     * @param  string $for_ip ${service.api.transfer.token.param.for-ip} (required)
     * @param  string $from_host ${service.api.transfer.token.param.from-host} (required)
     * @param  string $from_ip ${service.api.transfer.token.param.from-ip} (required)
     * @param  string $scope ${service.api.transfer.token.param.scope} (required)
     * @param  string $target ${service.api.transfer.token.param.target} (required)
     * @param  string $via_host ${service.api.transfer.token.param.via-host} (required)
     * @param  bool $check_ip ${service.api.transfer.token.param.check-ip} (optional, default to true)
     * @param  string $redirect ${service.api.transfer.token.param.redirect} (optional)
     * @param  int $ttl ${service.api.transfer.token.param.ttl} (optional, default to 5)
     * @param  string $user_email ${service.api.transfer.token.param.user-email} (optional)
     * @param  string $user_name ${service.api.transfer.token.param.user-name} (optional)
     *
     * @throws \TransferTokenClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TransferTokenClient\Model\Token
     */
    public function getTransferToken($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip = 'true', $redirect = null, $ttl = '5', $user_email = null, $user_name = null)
    {
        list($response) = $this->getTransferTokenWithHttpInfo($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip, $redirect, $ttl, $user_email, $user_name);
        return $response;
    }

    /**
     * Operation getTransferTokenWithHttpInfo
     *
     * Get Transfer Token
     *
     * @param  string $api_key ${service.api.transfer.token.param.api-key} (required)
     * @param  string $for_ip ${service.api.transfer.token.param.for-ip} (required)
     * @param  string $from_host ${service.api.transfer.token.param.from-host} (required)
     * @param  string $from_ip ${service.api.transfer.token.param.from-ip} (required)
     * @param  string $scope ${service.api.transfer.token.param.scope} (required)
     * @param  string $target ${service.api.transfer.token.param.target} (required)
     * @param  string $via_host ${service.api.transfer.token.param.via-host} (required)
     * @param  bool $check_ip ${service.api.transfer.token.param.check-ip} (optional, default to true)
     * @param  string $redirect ${service.api.transfer.token.param.redirect} (optional)
     * @param  int $ttl ${service.api.transfer.token.param.ttl} (optional, default to 5)
     * @param  string $user_email ${service.api.transfer.token.param.user-email} (optional)
     * @param  string $user_name ${service.api.transfer.token.param.user-name} (optional)
     *
     * @throws \TransferTokenClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TransferTokenClient\Model\Token, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransferTokenWithHttpInfo($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip = 'true', $redirect = null, $ttl = '5', $user_email = null, $user_name = null)
    {
        $returnType = '\TransferTokenClient\Model\Token';
        $request = $this->getTransferTokenRequest($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip, $redirect, $ttl, $user_email, $user_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TransferTokenClient\Model\Token',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransferTokenAsync
     *
     * Get Transfer Token
     *
     * @param  string $api_key ${service.api.transfer.token.param.api-key} (required)
     * @param  string $for_ip ${service.api.transfer.token.param.for-ip} (required)
     * @param  string $from_host ${service.api.transfer.token.param.from-host} (required)
     * @param  string $from_ip ${service.api.transfer.token.param.from-ip} (required)
     * @param  string $scope ${service.api.transfer.token.param.scope} (required)
     * @param  string $target ${service.api.transfer.token.param.target} (required)
     * @param  string $via_host ${service.api.transfer.token.param.via-host} (required)
     * @param  bool $check_ip ${service.api.transfer.token.param.check-ip} (optional, default to true)
     * @param  string $redirect ${service.api.transfer.token.param.redirect} (optional)
     * @param  int $ttl ${service.api.transfer.token.param.ttl} (optional, default to 5)
     * @param  string $user_email ${service.api.transfer.token.param.user-email} (optional)
     * @param  string $user_name ${service.api.transfer.token.param.user-name} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransferTokenAsync($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip = 'true', $redirect = null, $ttl = '5', $user_email = null, $user_name = null)
    {
        return $this->getTransferTokenAsyncWithHttpInfo($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip, $redirect, $ttl, $user_email, $user_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransferTokenAsyncWithHttpInfo
     *
     * Get Transfer Token
     *
     * @param  string $api_key ${service.api.transfer.token.param.api-key} (required)
     * @param  string $for_ip ${service.api.transfer.token.param.for-ip} (required)
     * @param  string $from_host ${service.api.transfer.token.param.from-host} (required)
     * @param  string $from_ip ${service.api.transfer.token.param.from-ip} (required)
     * @param  string $scope ${service.api.transfer.token.param.scope} (required)
     * @param  string $target ${service.api.transfer.token.param.target} (required)
     * @param  string $via_host ${service.api.transfer.token.param.via-host} (required)
     * @param  bool $check_ip ${service.api.transfer.token.param.check-ip} (optional, default to true)
     * @param  string $redirect ${service.api.transfer.token.param.redirect} (optional)
     * @param  int $ttl ${service.api.transfer.token.param.ttl} (optional, default to 5)
     * @param  string $user_email ${service.api.transfer.token.param.user-email} (optional)
     * @param  string $user_name ${service.api.transfer.token.param.user-name} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransferTokenAsyncWithHttpInfo($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip = 'true', $redirect = null, $ttl = '5', $user_email = null, $user_name = null)
    {
        $returnType = '\TransferTokenClient\Model\Token';
        $request = $this->getTransferTokenRequest($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip, $redirect, $ttl, $user_email, $user_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransferToken'
     *
     * @param  string $api_key ${service.api.transfer.token.param.api-key} (required)
     * @param  string $for_ip ${service.api.transfer.token.param.for-ip} (required)
     * @param  string $from_host ${service.api.transfer.token.param.from-host} (required)
     * @param  string $from_ip ${service.api.transfer.token.param.from-ip} (required)
     * @param  string $scope ${service.api.transfer.token.param.scope} (required)
     * @param  string $target ${service.api.transfer.token.param.target} (required)
     * @param  string $via_host ${service.api.transfer.token.param.via-host} (required)
     * @param  bool $check_ip ${service.api.transfer.token.param.check-ip} (optional, default to true)
     * @param  string $redirect ${service.api.transfer.token.param.redirect} (optional)
     * @param  int $ttl ${service.api.transfer.token.param.ttl} (optional, default to 5)
     * @param  string $user_email ${service.api.transfer.token.param.user-email} (optional)
     * @param  string $user_name ${service.api.transfer.token.param.user-name} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransferTokenRequest($api_key, $for_ip, $from_host, $from_ip, $scope, $target, $via_host, $check_ip = 'true', $redirect = null, $ttl = '5', $user_email = null, $user_name = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getTransferToken'
            );
        }
        // verify the required parameter 'for_ip' is set
        if ($for_ip === null || (is_array($for_ip) && count($for_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $for_ip when calling getTransferToken'
            );
        }
        // verify the required parameter 'from_host' is set
        if ($from_host === null || (is_array($from_host) && count($from_host) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_host when calling getTransferToken'
            );
        }
        // verify the required parameter 'from_ip' is set
        if ($from_ip === null || (is_array($from_ip) && count($from_ip) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_ip when calling getTransferToken'
            );
        }
        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling getTransferToken'
            );
        }
        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling getTransferToken'
            );
        }
        // verify the required parameter 'via_host' is set
        if ($via_host === null || (is_array($via_host) && count($via_host) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $via_host when calling getTransferToken'
            );
        }

        $resourcePath = '/api/transfer/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($check_ip !== null) {
            $queryParams['checkIP'] = ObjectSerializer::toQueryValue($check_ip);
        }
        // query params
        if ($for_ip !== null) {
            $queryParams['forIP'] = ObjectSerializer::toQueryValue($for_ip);
        }
        // query params
        if ($from_host !== null) {
            $queryParams['fromHost'] = ObjectSerializer::toQueryValue($from_host);
        }
        // query params
        if ($from_ip !== null) {
            $queryParams['fromIP'] = ObjectSerializer::toQueryValue($from_ip);
        }
        // query params
        if ($redirect !== null) {
            $queryParams['redirect'] = ObjectSerializer::toQueryValue($redirect);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($target !== null) {
            $queryParams['target'] = ObjectSerializer::toQueryValue($target);
        }
        // query params
        if ($ttl !== null) {
            $queryParams['ttl'] = ObjectSerializer::toQueryValue($ttl);
        }
        // query params
        if ($user_email !== null) {
            $queryParams['userEmail'] = ObjectSerializer::toQueryValue($user_email);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($via_host !== null) {
            $queryParams['viaHost'] = ObjectSerializer::toQueryValue($via_host);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
