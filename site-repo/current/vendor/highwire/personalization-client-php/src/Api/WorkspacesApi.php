<?php
/**
 * WorkspacesApi
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PersonalizationClient\ApiException;
use PersonalizationClient\Configuration;
use PersonalizationClient\HeaderSelector;
use PersonalizationClient\ObjectSerializer;

/**
 * WorkspacesApi Class Doc Comment
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkspacesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation handleCreateWorkspaceUsingParamsUsingPOST
     *
     * Create a new workspace
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. Used as the default &lt;strong&gt;name&lt;/strong&gt; if no name is supplied, and also as the basis of generating a &lt;strong&gt;handle&lt;/strong&gt; if no handle is supplied. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. If not supplied, one will be generated using the (required) &lt;strong&gt;email&lt;/strong&gt; address (optional)
     * @param  string $name A name for the workspace as provided by the calling application, eg, &lt;em&gt;Craig \&quot;Pookie\&quot; Jurney&lt;/em&gt;. If none is supplied the &lt;strong&gt;email&lt;/strong&gt; is used as the value. (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\WorkspaceResource
     */
    public function handleCreateWorkspaceUsingParamsUsingPOST($context, $email, $handle = null, $name = null)
    {
        list($response) = $this->handleCreateWorkspaceUsingParamsUsingPOSTWithHttpInfo($context, $email, $handle, $name);
        return $response;
    }

    /**
     * Operation handleCreateWorkspaceUsingParamsUsingPOSTWithHttpInfo
     *
     * Create a new workspace
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. Used as the default &lt;strong&gt;name&lt;/strong&gt; if no name is supplied, and also as the basis of generating a &lt;strong&gt;handle&lt;/strong&gt; if no handle is supplied. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. If not supplied, one will be generated using the (required) &lt;strong&gt;email&lt;/strong&gt; address (optional)
     * @param  string $name A name for the workspace as provided by the calling application, eg, &lt;em&gt;Craig \&quot;Pookie\&quot; Jurney&lt;/em&gt;. If none is supplied the &lt;strong&gt;email&lt;/strong&gt; is used as the value. (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\WorkspaceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleCreateWorkspaceUsingParamsUsingPOSTWithHttpInfo($context, $email, $handle = null, $name = null)
    {
        $returnType = '\PersonalizationClient\Model\WorkspaceResource';
        $request = $this->handleCreateWorkspaceUsingParamsUsingPOSTRequest($context, $email, $handle, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\WorkspaceResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\WorkspaceResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleCreateWorkspaceUsingParamsUsingPOSTAsync
     *
     * Create a new workspace
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. Used as the default &lt;strong&gt;name&lt;/strong&gt; if no name is supplied, and also as the basis of generating a &lt;strong&gt;handle&lt;/strong&gt; if no handle is supplied. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. If not supplied, one will be generated using the (required) &lt;strong&gt;email&lt;/strong&gt; address (optional)
     * @param  string $name A name for the workspace as provided by the calling application, eg, &lt;em&gt;Craig \&quot;Pookie\&quot; Jurney&lt;/em&gt;. If none is supplied the &lt;strong&gt;email&lt;/strong&gt; is used as the value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleCreateWorkspaceUsingParamsUsingPOSTAsync($context, $email, $handle = null, $name = null)
    {
        return $this->handleCreateWorkspaceUsingParamsUsingPOSTAsyncWithHttpInfo($context, $email, $handle, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleCreateWorkspaceUsingParamsUsingPOSTAsyncWithHttpInfo
     *
     * Create a new workspace
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. Used as the default &lt;strong&gt;name&lt;/strong&gt; if no name is supplied, and also as the basis of generating a &lt;strong&gt;handle&lt;/strong&gt; if no handle is supplied. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. If not supplied, one will be generated using the (required) &lt;strong&gt;email&lt;/strong&gt; address (optional)
     * @param  string $name A name for the workspace as provided by the calling application, eg, &lt;em&gt;Craig \&quot;Pookie\&quot; Jurney&lt;/em&gt;. If none is supplied the &lt;strong&gt;email&lt;/strong&gt; is used as the value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleCreateWorkspaceUsingParamsUsingPOSTAsyncWithHttpInfo($context, $email, $handle = null, $name = null)
    {
        $returnType = '\PersonalizationClient\Model\WorkspaceResource';
        $request = $this->handleCreateWorkspaceUsingParamsUsingPOSTRequest($context, $email, $handle, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleCreateWorkspaceUsingParamsUsingPOST'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. Used as the default &lt;strong&gt;name&lt;/strong&gt; if no name is supplied, and also as the basis of generating a &lt;strong&gt;handle&lt;/strong&gt; if no handle is supplied. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. If not supplied, one will be generated using the (required) &lt;strong&gt;email&lt;/strong&gt; address (optional)
     * @param  string $name A name for the workspace as provided by the calling application, eg, &lt;em&gt;Craig \&quot;Pookie\&quot; Jurney&lt;/em&gt;. If none is supplied the &lt;strong&gt;email&lt;/strong&gt; is used as the value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleCreateWorkspaceUsingParamsUsingPOSTRequest($context, $email, $handle = null, $name = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleCreateWorkspaceUsingParamsUsingPOST'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling handleCreateWorkspaceUsingParamsUsingPOST'
            );
        }

        $resourcePath = '/api/{context}/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.workspace+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.workspace+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleDeleteWorkspaceUsingDELETE
     *
     * Delete an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function handleDeleteWorkspaceUsingDELETE($context, $handle)
    {
        $this->handleDeleteWorkspaceUsingDELETEWithHttpInfo($context, $handle);
    }

    /**
     * Operation handleDeleteWorkspaceUsingDELETEWithHttpInfo
     *
     * Delete an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleDeleteWorkspaceUsingDELETEWithHttpInfo($context, $handle)
    {
        $returnType = '';
        $request = $this->handleDeleteWorkspaceUsingDELETERequest($context, $handle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation handleDeleteWorkspaceUsingDELETEAsync
     *
     * Delete an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleDeleteWorkspaceUsingDELETEAsync($context, $handle)
    {
        return $this->handleDeleteWorkspaceUsingDELETEAsyncWithHttpInfo($context, $handle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleDeleteWorkspaceUsingDELETEAsyncWithHttpInfo
     *
     * Delete an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleDeleteWorkspaceUsingDELETEAsyncWithHttpInfo($context, $handle)
    {
        $returnType = '';
        $request = $this->handleDeleteWorkspaceUsingDELETERequest($context, $handle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleDeleteWorkspaceUsingDELETE'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleDeleteWorkspaceUsingDELETERequest($context, $handle)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleDeleteWorkspaceUsingDELETE'
            );
        }
        // verify the required parameter 'handle' is set
        if ($handle === null || (is_array($handle) && count($handle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handle when calling handleDeleteWorkspaceUsingDELETE'
            );
        }

        $resourcePath = '/api/{context}/workspaces/{handle}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                '{' . 'handle' . '}',
                ObjectSerializer::toPathValue($handle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetWorkspaceByEmailUsingGET
     *
     * Retrieve an existing workspace by its email
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\WorkspaceResource
     */
    public function handleGetWorkspaceByEmailUsingGET($context, $email)
    {
        list($response) = $this->handleGetWorkspaceByEmailUsingGETWithHttpInfo($context, $email);
        return $response;
    }

    /**
     * Operation handleGetWorkspaceByEmailUsingGETWithHttpInfo
     *
     * Retrieve an existing workspace by its email
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\WorkspaceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetWorkspaceByEmailUsingGETWithHttpInfo($context, $email)
    {
        $returnType = '\PersonalizationClient\Model\WorkspaceResource';
        $request = $this->handleGetWorkspaceByEmailUsingGETRequest($context, $email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\WorkspaceResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetWorkspaceByEmailUsingGETAsync
     *
     * Retrieve an existing workspace by its email
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetWorkspaceByEmailUsingGETAsync($context, $email)
    {
        return $this->handleGetWorkspaceByEmailUsingGETAsyncWithHttpInfo($context, $email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetWorkspaceByEmailUsingGETAsyncWithHttpInfo
     *
     * Retrieve an existing workspace by its email
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetWorkspaceByEmailUsingGETAsyncWithHttpInfo($context, $email)
    {
        $returnType = '\PersonalizationClient\Model\WorkspaceResource';
        $request = $this->handleGetWorkspaceByEmailUsingGETRequest($context, $email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetWorkspaceByEmailUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetWorkspaceByEmailUsingGETRequest($context, $email)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetWorkspaceByEmailUsingGET'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling handleGetWorkspaceByEmailUsingGET'
            );
        }

        $resourcePath = '/api/{context}/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.workspace+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.workspace+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetWorkspaceByHandleUsingGET
     *
     * Retrieve an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\WorkspaceResource
     */
    public function handleGetWorkspaceByHandleUsingGET($context, $handle)
    {
        list($response) = $this->handleGetWorkspaceByHandleUsingGETWithHttpInfo($context, $handle);
        return $response;
    }

    /**
     * Operation handleGetWorkspaceByHandleUsingGETWithHttpInfo
     *
     * Retrieve an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\WorkspaceResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetWorkspaceByHandleUsingGETWithHttpInfo($context, $handle)
    {
        $returnType = '\PersonalizationClient\Model\WorkspaceResource';
        $request = $this->handleGetWorkspaceByHandleUsingGETRequest($context, $handle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\WorkspaceResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetWorkspaceByHandleUsingGETAsync
     *
     * Retrieve an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetWorkspaceByHandleUsingGETAsync($context, $handle)
    {
        return $this->handleGetWorkspaceByHandleUsingGETAsyncWithHttpInfo($context, $handle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetWorkspaceByHandleUsingGETAsyncWithHttpInfo
     *
     * Retrieve an existing workspace by its handle
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetWorkspaceByHandleUsingGETAsyncWithHttpInfo($context, $handle)
    {
        $returnType = '\PersonalizationClient\Model\WorkspaceResource';
        $request = $this->handleGetWorkspaceByHandleUsingGETRequest($context, $handle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetWorkspaceByHandleUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $handle Handle for the workspace as provided by the calling application, eg, &lt;em&gt;e40b7df3&lt;/em&gt;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetWorkspaceByHandleUsingGETRequest($context, $handle)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetWorkspaceByHandleUsingGET'
            );
        }
        // verify the required parameter 'handle' is set
        if ($handle === null || (is_array($handle) && count($handle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handle when calling handleGetWorkspaceByHandleUsingGET'
            );
        }

        $resourcePath = '/api/{context}/workspaces/{handle}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                '{' . 'handle' . '}',
                ObjectSerializer::toPathValue($handle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.workspace+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.workspace+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
