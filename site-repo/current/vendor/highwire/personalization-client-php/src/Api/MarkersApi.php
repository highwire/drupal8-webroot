<?php
/**
 * MarkersApi
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PersonalizationClient\ApiException;
use PersonalizationClient\Configuration;
use PersonalizationClient\HeaderSelector;
use PersonalizationClient\ObjectSerializer;

/**
 * MarkersApi Class Doc Comment
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarkersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation handleDeleteMarkerUsingDELETE
     *
     * Delete a marker
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function handleDeleteMarkerUsingDELETE($context, $id)
    {
        $this->handleDeleteMarkerUsingDELETEWithHttpInfo($context, $id);
    }

    /**
     * Operation handleDeleteMarkerUsingDELETEWithHttpInfo
     *
     * Delete a marker
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleDeleteMarkerUsingDELETEWithHttpInfo($context, $id)
    {
        $returnType = '';
        $request = $this->handleDeleteMarkerUsingDELETERequest($context, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation handleDeleteMarkerUsingDELETEAsync
     *
     * Delete a marker
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleDeleteMarkerUsingDELETEAsync($context, $id)
    {
        return $this->handleDeleteMarkerUsingDELETEAsyncWithHttpInfo($context, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleDeleteMarkerUsingDELETEAsyncWithHttpInfo
     *
     * Delete a marker
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleDeleteMarkerUsingDELETEAsyncWithHttpInfo($context, $id)
    {
        $returnType = '';
        $request = $this->handleDeleteMarkerUsingDELETERequest($context, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleDeleteMarkerUsingDELETE'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleDeleteMarkerUsingDELETERequest($context, $id)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleDeleteMarkerUsingDELETE'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling handleDeleteMarkerUsingDELETE'
            );
        }

        $resourcePath = '/api/{context}/markers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetMarkerUsingGET
     *
     * Get a marker by its ID
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  bool $with_feature withFeature (optional)
     * @param  bool $with_workspace withWorkspace (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\MarkerResource
     */
    public function handleGetMarkerUsingGET($context, $id, $with_feature = null, $with_workspace = null)
    {
        list($response) = $this->handleGetMarkerUsingGETWithHttpInfo($context, $id, $with_feature, $with_workspace);
        return $response;
    }

    /**
     * Operation handleGetMarkerUsingGETWithHttpInfo
     *
     * Get a marker by its ID
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  bool $with_feature withFeature (optional)
     * @param  bool $with_workspace withWorkspace (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\MarkerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetMarkerUsingGETWithHttpInfo($context, $id, $with_feature = null, $with_workspace = null)
    {
        $returnType = '\PersonalizationClient\Model\MarkerResource';
        $request = $this->handleGetMarkerUsingGETRequest($context, $id, $with_feature, $with_workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\MarkerResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetMarkerUsingGETAsync
     *
     * Get a marker by its ID
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  bool $with_feature withFeature (optional)
     * @param  bool $with_workspace withWorkspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetMarkerUsingGETAsync($context, $id, $with_feature = null, $with_workspace = null)
    {
        return $this->handleGetMarkerUsingGETAsyncWithHttpInfo($context, $id, $with_feature, $with_workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetMarkerUsingGETAsyncWithHttpInfo
     *
     * Get a marker by its ID
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  bool $with_feature withFeature (optional)
     * @param  bool $with_workspace withWorkspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetMarkerUsingGETAsyncWithHttpInfo($context, $id, $with_feature = null, $with_workspace = null)
    {
        $returnType = '\PersonalizationClient\Model\MarkerResource';
        $request = $this->handleGetMarkerUsingGETRequest($context, $id, $with_feature, $with_workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetMarkerUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  bool $with_feature withFeature (optional)
     * @param  bool $with_workspace withWorkspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetMarkerUsingGETRequest($context, $id, $with_feature = null, $with_workspace = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetMarkerUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling handleGetMarkerUsingGET'
            );
        }

        $resourcePath = '/api/{context}/markers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with_feature !== null) {
            $queryParams['withFeature'] = ObjectSerializer::toQueryValue($with_feature);
        }
        // query params
        if ($with_workspace !== null) {
            $queryParams['withWorkspace'] = ObjectSerializer::toQueryValue($with_workspace);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.marker+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.marker+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetMarkersUsingGET
     *
     * Get markers
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application. (required)
     * @param  string $atom The resource that is marked, eg, an Atom. (optional)
     * @param  string $content_type The type of Atom that is marked, eg, article, chapter, figure or the like. (optional)
     * @param  string[] $include Type of markers to include, eg, &lt;em&gt;content&lt;/em&gt;, may occur multiple times. (optional)
     * @param  string $location The page that is marked, eg, a location in the site. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_workspace with-workspace (optional)
     * @param  bool $with_feature with-feature (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\MarkerResources
     */
    public function handleGetMarkersUsingGET($context, $email, $atom = null, $content_type = null, $include = null, $location = null, $page = null, $size = '20', $sort = null, $with_available = null, $with_workspace = null, $with_feature = null)
    {
        list($response) = $this->handleGetMarkersUsingGETWithHttpInfo($context, $email, $atom, $content_type, $include, $location, $page, $size, $sort, $with_available, $with_workspace, $with_feature);
        return $response;
    }

    /**
     * Operation handleGetMarkersUsingGETWithHttpInfo
     *
     * Get markers
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application. (required)
     * @param  string $atom The resource that is marked, eg, an Atom. (optional)
     * @param  string $content_type The type of Atom that is marked, eg, article, chapter, figure or the like. (optional)
     * @param  string[] $include Type of markers to include, eg, &lt;em&gt;content&lt;/em&gt;, may occur multiple times. (optional)
     * @param  string $location The page that is marked, eg, a location in the site. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_workspace with-workspace (optional)
     * @param  bool $with_feature with-feature (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\MarkerResources, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetMarkersUsingGETWithHttpInfo($context, $email, $atom = null, $content_type = null, $include = null, $location = null, $page = null, $size = '20', $sort = null, $with_available = null, $with_workspace = null, $with_feature = null)
    {
        $returnType = '\PersonalizationClient\Model\MarkerResources';
        $request = $this->handleGetMarkersUsingGETRequest($context, $email, $atom, $content_type, $include, $location, $page, $size, $sort, $with_available, $with_workspace, $with_feature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\MarkerResources',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetMarkersUsingGETAsync
     *
     * Get markers
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application. (required)
     * @param  string $atom The resource that is marked, eg, an Atom. (optional)
     * @param  string $content_type The type of Atom that is marked, eg, article, chapter, figure or the like. (optional)
     * @param  string[] $include Type of markers to include, eg, &lt;em&gt;content&lt;/em&gt;, may occur multiple times. (optional)
     * @param  string $location The page that is marked, eg, a location in the site. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_workspace with-workspace (optional)
     * @param  bool $with_feature with-feature (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetMarkersUsingGETAsync($context, $email, $atom = null, $content_type = null, $include = null, $location = null, $page = null, $size = '20', $sort = null, $with_available = null, $with_workspace = null, $with_feature = null)
    {
        return $this->handleGetMarkersUsingGETAsyncWithHttpInfo($context, $email, $atom, $content_type, $include, $location, $page, $size, $sort, $with_available, $with_workspace, $with_feature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetMarkersUsingGETAsyncWithHttpInfo
     *
     * Get markers
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application. (required)
     * @param  string $atom The resource that is marked, eg, an Atom. (optional)
     * @param  string $content_type The type of Atom that is marked, eg, article, chapter, figure or the like. (optional)
     * @param  string[] $include Type of markers to include, eg, &lt;em&gt;content&lt;/em&gt;, may occur multiple times. (optional)
     * @param  string $location The page that is marked, eg, a location in the site. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_workspace with-workspace (optional)
     * @param  bool $with_feature with-feature (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetMarkersUsingGETAsyncWithHttpInfo($context, $email, $atom = null, $content_type = null, $include = null, $location = null, $page = null, $size = '20', $sort = null, $with_available = null, $with_workspace = null, $with_feature = null)
    {
        $returnType = '\PersonalizationClient\Model\MarkerResources';
        $request = $this->handleGetMarkersUsingGETRequest($context, $email, $atom, $content_type, $include, $location, $page, $size, $sort, $with_available, $with_workspace, $with_feature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetMarkersUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application. (required)
     * @param  string $atom The resource that is marked, eg, an Atom. (optional)
     * @param  string $content_type The type of Atom that is marked, eg, article, chapter, figure or the like. (optional)
     * @param  string[] $include Type of markers to include, eg, &lt;em&gt;content&lt;/em&gt;, may occur multiple times. (optional)
     * @param  string $location The page that is marked, eg, a location in the site. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_workspace with-workspace (optional)
     * @param  bool $with_feature with-feature (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetMarkersUsingGETRequest($context, $email, $atom = null, $content_type = null, $include = null, $location = null, $page = null, $size = '20', $sort = null, $with_available = null, $with_workspace = null, $with_feature = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetMarkersUsingGET'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling handleGetMarkersUsingGET'
            );
        }

        $resourcePath = '/api/{context}/markers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($atom !== null) {
            $queryParams['atom'] = ObjectSerializer::toQueryValue($atom);
        }
        // query params
        if ($content_type !== null) {
            $queryParams['content.type'] = ObjectSerializer::toQueryValue($content_type);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if (is_array($include)) {
            $queryParams['include'] = $include;
        } else
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($with_available !== null) {
            $queryParams['with-available'] = ObjectSerializer::toQueryValue($with_available);
        }
        // query params
        if ($with_workspace !== null) {
            $queryParams['with-workspace'] = ObjectSerializer::toQueryValue($with_workspace);
        }
        // query params
        if ($with_feature !== null) {
            $queryParams['withFeature'] = ObjectSerializer::toQueryValue($with_feature);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handlePostContentMarkerUsingPOST
     *
     * handlePostContentMarker
     *
     * @param  string $context context (required)
     * @param  \PersonalizationClient\Model\MarkerData $marker_data markerData (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\MarkerResource
     */
    public function handlePostContentMarkerUsingPOST($context, $marker_data)
    {
        list($response) = $this->handlePostContentMarkerUsingPOSTWithHttpInfo($context, $marker_data);
        return $response;
    }

    /**
     * Operation handlePostContentMarkerUsingPOSTWithHttpInfo
     *
     * handlePostContentMarker
     *
     * @param  string $context context (required)
     * @param  \PersonalizationClient\Model\MarkerData $marker_data markerData (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\MarkerResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handlePostContentMarkerUsingPOSTWithHttpInfo($context, $marker_data)
    {
        $returnType = '\PersonalizationClient\Model\MarkerResource';
        $request = $this->handlePostContentMarkerUsingPOSTRequest($context, $marker_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\MarkerResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handlePostContentMarkerUsingPOSTAsync
     *
     * handlePostContentMarker
     *
     * @param  string $context context (required)
     * @param  \PersonalizationClient\Model\MarkerData $marker_data markerData (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handlePostContentMarkerUsingPOSTAsync($context, $marker_data)
    {
        return $this->handlePostContentMarkerUsingPOSTAsyncWithHttpInfo($context, $marker_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handlePostContentMarkerUsingPOSTAsyncWithHttpInfo
     *
     * handlePostContentMarker
     *
     * @param  string $context context (required)
     * @param  \PersonalizationClient\Model\MarkerData $marker_data markerData (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handlePostContentMarkerUsingPOSTAsyncWithHttpInfo($context, $marker_data)
    {
        $returnType = '\PersonalizationClient\Model\MarkerResource';
        $request = $this->handlePostContentMarkerUsingPOSTRequest($context, $marker_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handlePostContentMarkerUsingPOST'
     *
     * @param  string $context context (required)
     * @param  \PersonalizationClient\Model\MarkerData $marker_data markerData (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handlePostContentMarkerUsingPOSTRequest($context, $marker_data)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handlePostContentMarkerUsingPOST'
            );
        }
        // verify the required parameter 'marker_data' is set
        if ($marker_data === null || (is_array($marker_data) && count($marker_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marker_data when calling handlePostContentMarkerUsingPOST'
            );
        }

        $resourcePath = '/api/{context}/markers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($marker_data)) {
            $_tempBody = $marker_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.marker+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.marker+json'],
                ['application/vnd.hw-p13n.marker-data+json', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
