<?php
/**
 * AlertsApi
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PersonalizationClient\ApiException;
use PersonalizationClient\Configuration;
use PersonalizationClient\HeaderSelector;
use PersonalizationClient\ObjectSerializer;

/**
 * AlertsApi Class Doc Comment
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AlertsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation handleDeleteByIdUsingDELETE
     *
     * Delete an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function handleDeleteByIdUsingDELETE($context, $id)
    {
        $this->handleDeleteByIdUsingDELETEWithHttpInfo($context, $id);
    }

    /**
     * Operation handleDeleteByIdUsingDELETEWithHttpInfo
     *
     * Delete an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleDeleteByIdUsingDELETEWithHttpInfo($context, $id)
    {
        $returnType = '';
        $request = $this->handleDeleteByIdUsingDELETERequest($context, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation handleDeleteByIdUsingDELETEAsync
     *
     * Delete an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleDeleteByIdUsingDELETEAsync($context, $id)
    {
        return $this->handleDeleteByIdUsingDELETEAsyncWithHttpInfo($context, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleDeleteByIdUsingDELETEAsyncWithHttpInfo
     *
     * Delete an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleDeleteByIdUsingDELETEAsyncWithHttpInfo($context, $id)
    {
        $returnType = '';
        $request = $this->handleDeleteByIdUsingDELETERequest($context, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleDeleteByIdUsingDELETE'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleDeleteByIdUsingDELETERequest($context, $id)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleDeleteByIdUsingDELETE'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling handleDeleteByIdUsingDELETE'
            );
        }

        $resourcePath = '/api/{context}/alerts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetAvailableUsingGET
     *
     * Get available alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $type type (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\AlertResource[]
     */
    public function handleGetAvailableUsingGET($context, $atom = null, $type = null)
    {
        list($response) = $this->handleGetAvailableUsingGETWithHttpInfo($context, $atom, $type);
        return $response;
    }

    /**
     * Operation handleGetAvailableUsingGETWithHttpInfo
     *
     * Get available alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $type type (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\AlertResource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetAvailableUsingGETWithHttpInfo($context, $atom = null, $type = null)
    {
        $returnType = '\PersonalizationClient\Model\AlertResource[]';
        $request = $this->handleGetAvailableUsingGETRequest($context, $atom, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetAvailableUsingGETAsync
     *
     * Get available alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $type type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetAvailableUsingGETAsync($context, $atom = null, $type = null)
    {
        return $this->handleGetAvailableUsingGETAsyncWithHttpInfo($context, $atom, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetAvailableUsingGETAsyncWithHttpInfo
     *
     * Get available alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $type type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetAvailableUsingGETAsyncWithHttpInfo($context, $atom = null, $type = null)
    {
        $returnType = '\PersonalizationClient\Model\AlertResource[]';
        $request = $this->handleGetAvailableUsingGETRequest($context, $atom, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetAvailableUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $type type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetAvailableUsingGETRequest($context, $atom = null, $type = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetAvailableUsingGET'
            );
        }

        $resourcePath = '/api/{context}/alerts/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($atom !== null) {
            $queryParams['atom'] = ObjectSerializer::toQueryValue($atom);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetByIdUsingGET
     *
     * Get an alert by identifier
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\AlertResource
     */
    public function handleGetByIdUsingGET($context, $id)
    {
        list($response) = $this->handleGetByIdUsingGETWithHttpInfo($context, $id);
        return $response;
    }

    /**
     * Operation handleGetByIdUsingGETWithHttpInfo
     *
     * Get an alert by identifier
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\AlertResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetByIdUsingGETWithHttpInfo($context, $id)
    {
        $returnType = '\PersonalizationClient\Model\AlertResource';
        $request = $this->handleGetByIdUsingGETRequest($context, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetByIdUsingGETAsync
     *
     * Get an alert by identifier
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetByIdUsingGETAsync($context, $id)
    {
        return $this->handleGetByIdUsingGETAsyncWithHttpInfo($context, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetByIdUsingGETAsyncWithHttpInfo
     *
     * Get an alert by identifier
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetByIdUsingGETAsyncWithHttpInfo($context, $id)
    {
        $returnType = '\PersonalizationClient\Model\AlertResource';
        $request = $this->handleGetByIdUsingGETRequest($context, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetByIdUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetByIdUsingGETRequest($context, $id)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetByIdUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling handleGetByIdUsingGET'
            );
        }

        $resourcePath = '/api/{context}/alerts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.hw-p13n.alert+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.hw-p13n.alert+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGetListUsingGET
     *
     * Get list of alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  string $type type (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_feature with-feature (optional)
     * @param  bool $with_search with-search (optional)
     * @param  bool $with_workspace with-workspace (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\AlertResources
     */
    public function handleGetListUsingGET($context, $atom = null, $email = null, $page = null, $size = '20', $sort = null, $type = null, $with_available = null, $with_feature = null, $with_search = null, $with_workspace = null)
    {
        list($response) = $this->handleGetListUsingGETWithHttpInfo($context, $atom, $email, $page, $size, $sort, $type, $with_available, $with_feature, $with_search, $with_workspace);
        return $response;
    }

    /**
     * Operation handleGetListUsingGETWithHttpInfo
     *
     * Get list of alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  string $type type (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_feature with-feature (optional)
     * @param  bool $with_search with-search (optional)
     * @param  bool $with_workspace with-workspace (optional)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\AlertResources, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGetListUsingGETWithHttpInfo($context, $atom = null, $email = null, $page = null, $size = '20', $sort = null, $type = null, $with_available = null, $with_feature = null, $with_search = null, $with_workspace = null)
    {
        $returnType = '\PersonalizationClient\Model\AlertResources';
        $request = $this->handleGetListUsingGETRequest($context, $atom, $email, $page, $size, $sort, $type, $with_available, $with_feature, $with_search, $with_workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResources',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGetListUsingGETAsync
     *
     * Get list of alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  string $type type (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_feature with-feature (optional)
     * @param  bool $with_search with-search (optional)
     * @param  bool $with_workspace with-workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetListUsingGETAsync($context, $atom = null, $email = null, $page = null, $size = '20', $sort = null, $type = null, $with_available = null, $with_feature = null, $with_search = null, $with_workspace = null)
    {
        return $this->handleGetListUsingGETAsyncWithHttpInfo($context, $atom, $email, $page, $size, $sort, $type, $with_available, $with_feature, $with_search, $with_workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGetListUsingGETAsyncWithHttpInfo
     *
     * Get list of alerts
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  string $type type (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_feature with-feature (optional)
     * @param  bool $with_search with-search (optional)
     * @param  bool $with_workspace with-workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGetListUsingGETAsyncWithHttpInfo($context, $atom = null, $email = null, $page = null, $size = '20', $sort = null, $type = null, $with_available = null, $with_feature = null, $with_search = null, $with_workspace = null)
    {
        $returnType = '\PersonalizationClient\Model\AlertResources';
        $request = $this->handleGetListUsingGETRequest($context, $atom, $email, $page, $size, $sort, $type, $with_available, $with_feature, $with_search, $with_workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGetListUsingGET'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $atom atom (optional)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. (optional)
     * @param  int $page 0-based page index (optional)
     * @param  int $size Number of alerts to include per page (optional, default to 20)
     * @param  string[] $sort Sort field in ascending (default) or descending order. To sort by a field in descending order, add |desc to the sort-property name, eg, created|desc (optional)
     * @param  string $type type (optional)
     * @param  bool $with_available with-available (optional)
     * @param  bool $with_feature with-feature (optional)
     * @param  bool $with_search with-search (optional)
     * @param  bool $with_workspace with-workspace (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGetListUsingGETRequest($context, $atom = null, $email = null, $page = null, $size = '20', $sort = null, $type = null, $with_available = null, $with_feature = null, $with_search = null, $with_workspace = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handleGetListUsingGET'
            );
        }

        $resourcePath = '/api/{context}/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($atom !== null) {
            $queryParams['atom'] = ObjectSerializer::toQueryValue($atom);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($with_available !== null) {
            $queryParams['with-available'] = ObjectSerializer::toQueryValue($with_available);
        }
        // query params
        if ($with_feature !== null) {
            $queryParams['with-feature'] = ObjectSerializer::toQueryValue($with_feature);
        }
        // query params
        if ($with_search !== null) {
            $queryParams['with-search'] = ObjectSerializer::toQueryValue($with_search);
        }
        // query params
        if ($with_workspace !== null) {
            $queryParams['with-workspace'] = ObjectSerializer::toQueryValue($with_workspace);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handlePatchAnyUsingPATCH
     *
     * Update an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  string $days days (optional)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\AlertResource
     */
    public function handlePatchAnyUsingPATCH($context, $id, $days = null, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        list($response) = $this->handlePatchAnyUsingPATCHWithHttpInfo($context, $id, $days, $delivery, $frequency, $name, $status);
        return $response;
    }

    /**
     * Operation handlePatchAnyUsingPATCHWithHttpInfo
     *
     * Update an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  string $days days (optional)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\AlertResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handlePatchAnyUsingPATCHWithHttpInfo($context, $id, $days = null, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        $returnType = '\PersonalizationClient\Model\AlertResource';
        $request = $this->handlePatchAnyUsingPATCHRequest($context, $id, $days, $delivery, $frequency, $name, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handlePatchAnyUsingPATCHAsync
     *
     * Update an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  string $days days (optional)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handlePatchAnyUsingPATCHAsync($context, $id, $days = null, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        return $this->handlePatchAnyUsingPATCHAsyncWithHttpInfo($context, $id, $days, $delivery, $frequency, $name, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handlePatchAnyUsingPATCHAsyncWithHttpInfo
     *
     * Update an alert
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  string $days days (optional)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handlePatchAnyUsingPATCHAsyncWithHttpInfo($context, $id, $days = null, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        $returnType = '\PersonalizationClient\Model\AlertResource';
        $request = $this->handlePatchAnyUsingPATCHRequest($context, $id, $days, $delivery, $frequency, $name, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handlePatchAnyUsingPATCH'
     *
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  int $id id (required)
     * @param  string $days days (optional)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handlePatchAnyUsingPATCHRequest($context, $id, $days = null, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handlePatchAnyUsingPATCH'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling handlePatchAnyUsingPATCH'
            );
        }

        $resourcePath = '/api/{context}/alerts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($days !== null) {
            $queryParams['days'] = ObjectSerializer::toQueryValue($days);
        }
        // query params
        if ($delivery !== null) {
            $queryParams['delivery'] = ObjectSerializer::toQueryValue($delivery);
        }
        // query params
        if ($frequency !== null) {
            $queryParams['frequency'] = ObjectSerializer::toQueryValue($frequency);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.alert+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.alert+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handlePostAlertUsingPOST
     *
     * Create a new alert
     *
     * @param  string $atom atom (required)
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. If this call results in the creation of a new Workspace, then used as the &lt;strong&gt;name&lt;/strong&gt; as well as the (hashed) &lt;strong&gt;handle&lt;/strong&gt;. (required)
     * @param  string $type type (required)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PersonalizationClient\Model\AlertResource
     */
    public function handlePostAlertUsingPOST($atom, $context, $email, $type, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        list($response) = $this->handlePostAlertUsingPOSTWithHttpInfo($atom, $context, $email, $type, $delivery, $frequency, $name, $status);
        return $response;
    }

    /**
     * Operation handlePostAlertUsingPOSTWithHttpInfo
     *
     * Create a new alert
     *
     * @param  string $atom atom (required)
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. If this call results in the creation of a new Workspace, then used as the &lt;strong&gt;name&lt;/strong&gt; as well as the (hashed) &lt;strong&gt;handle&lt;/strong&gt;. (required)
     * @param  string $type type (required)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \PersonalizationClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PersonalizationClient\Model\AlertResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function handlePostAlertUsingPOSTWithHttpInfo($atom, $context, $email, $type, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        $returnType = '\PersonalizationClient\Model\AlertResource';
        $request = $this->handlePostAlertUsingPOSTRequest($atom, $context, $email, $type, $delivery, $frequency, $name, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PersonalizationClient\Model\AlertResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handlePostAlertUsingPOSTAsync
     *
     * Create a new alert
     *
     * @param  string $atom atom (required)
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. If this call results in the creation of a new Workspace, then used as the &lt;strong&gt;name&lt;/strong&gt; as well as the (hashed) &lt;strong&gt;handle&lt;/strong&gt;. (required)
     * @param  string $type type (required)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handlePostAlertUsingPOSTAsync($atom, $context, $email, $type, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        return $this->handlePostAlertUsingPOSTAsyncWithHttpInfo($atom, $context, $email, $type, $delivery, $frequency, $name, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handlePostAlertUsingPOSTAsyncWithHttpInfo
     *
     * Create a new alert
     *
     * @param  string $atom atom (required)
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. If this call results in the creation of a new Workspace, then used as the &lt;strong&gt;name&lt;/strong&gt; as well as the (hashed) &lt;strong&gt;handle&lt;/strong&gt;. (required)
     * @param  string $type type (required)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handlePostAlertUsingPOSTAsyncWithHttpInfo($atom, $context, $email, $type, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        $returnType = '\PersonalizationClient\Model\AlertResource';
        $request = $this->handlePostAlertUsingPOSTRequest($atom, $context, $email, $type, $delivery, $frequency, $name, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handlePostAlertUsingPOST'
     *
     * @param  string $atom atom (required)
     * @param  string $context The application context for this service, eg, &lt;em&gt;sgrworks&lt;/em&gt;. A single publisher may have more than one application (or set of applications like JCore) using a platform service like Personalization and so the &lt;strong&gt;context&lt;/strong&gt; semantic scopes the service data in a way that the calling application can control. (required)
     * @param  string $email Authenticated user&#39;s email address as provided by the calling application, eg, &lt;em&gt;pookie@gmail.com&lt;/em&gt;. If this call results in the creation of a new Workspace, then used as the &lt;strong&gt;name&lt;/strong&gt; as well as the (hashed) &lt;strong&gt;handle&lt;/strong&gt;. (required)
     * @param  string $type type (required)
     * @param  string $delivery delivery (optional)
     * @param  string $frequency frequency (optional)
     * @param  string $name name (optional)
     * @param  string $status status (optional, default to active)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handlePostAlertUsingPOSTRequest($atom, $context, $email, $type, $delivery = null, $frequency = null, $name = null, $status = 'active')
    {
        // verify the required parameter 'atom' is set
        if ($atom === null || (is_array($atom) && count($atom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $atom when calling handlePostAlertUsingPOST'
            );
        }
        // verify the required parameter 'context' is set
        if ($context === null || (is_array($context) && count($context) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $context when calling handlePostAlertUsingPOST'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling handlePostAlertUsingPOST'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling handlePostAlertUsingPOST'
            );
        }

        $resourcePath = '/api/{context}/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($atom !== null) {
            $queryParams['atom'] = ObjectSerializer::toQueryValue($atom);
        }
        // query params
        if ($delivery !== null) {
            $queryParams['delivery'] = ObjectSerializer::toQueryValue($delivery);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($frequency !== null) {
            $queryParams['frequency'] = ObjectSerializer::toQueryValue($frequency);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                '{' . 'context' . '}',
                ObjectSerializer::toPathValue($context),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.hw-p13n.alert+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.hw-p13n.alert+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
