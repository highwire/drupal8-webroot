<?php
/**
 * SearchData
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Model;

use \ArrayAccess;
use \PersonalizationClient\ObjectSerializer;

/**
 * SearchData Class Doc Comment
 *
 * @category Class
 * @description Data used to create a new saved-search. One (and only one) of the query forms &lt;ul&gt;&lt;li&gt;query&lt;li&gt;query-json&lt;li&gt;query-xml&lt;/ul&gt; is required.
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label' => 'string',
        'description' => 'string',
        'query' => 'string',
        'results' => 'string',
        'query_json' => 'string',
        'query_xml' => 'string',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'label' => null,
        'description' => null,
        'query' => null,
        'results' => null,
        'query_json' => null,
        'query_xml' => null,
        'notes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'description' => 'description',
        'query' => 'query',
        'results' => 'results',
        'query_json' => 'query-json',
        'query_xml' => 'query-xml',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'description' => 'setDescription',
        'query' => 'setQuery',
        'results' => 'setResults',
        'query_json' => 'setQueryJson',
        'query_xml' => 'setQueryXml',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'description' => 'getDescription',
        'query' => 'getQuery',
        'results' => 'getResults',
        'query_json' => 'getQueryJson',
        'query_xml' => 'getQueryXml',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['query_json'] = isset($data['query_json']) ? $data['query_json'] : null;
        $this->container['query_xml'] = isset($data['query_xml']) ? $data['query_xml'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 256)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['label']) < 0)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 256)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['query']) && (mb_strlen($this->container['query']) > 1024)) {
            $invalidProperties[] = "invalid value for 'query', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['query']) && (mb_strlen($this->container['query']) < 0)) {
            $invalidProperties[] = "invalid value for 'query', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['results']) && (mb_strlen($this->container['results']) > 1024)) {
            $invalidProperties[] = "invalid value for 'results', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['results']) && (mb_strlen($this->container['results']) < 0)) {
            $invalidProperties[] = "invalid value for 'results', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['query_json']) && (mb_strlen($this->container['query_json']) > 8096)) {
            $invalidProperties[] = "invalid value for 'query_json', the character length must be smaller than or equal to 8096.";
        }

        if (!is_null($this->container['query_json']) && (mb_strlen($this->container['query_json']) < 0)) {
            $invalidProperties[] = "invalid value for 'query_json', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['query_xml']) && (mb_strlen($this->container['query_xml']) > 8096)) {
            $invalidProperties[] = "invalid value for 'query_xml', the character length must be smaller than or equal to 8096.";
        }

        if (!is_null($this->container['query_xml']) && (mb_strlen($this->container['query_xml']) < 0)) {
            $invalidProperties[] = "invalid value for 'query_xml', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 8096)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 8096.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) < 0)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label To aid in recall when presented with a flat list of saved search.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 256)) {
            throw new \InvalidArgumentException('invalid length for $label when calling SearchData., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($label) < 0)) {
            throw new \InvalidArgumentException('invalid length for $label when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A digest of the search supplied by the site of the form 'Your search for....'
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 256)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SearchData., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query URL-style 'key=value' search store as raw text, ie, not URL-encoded. By convention this is not a full URL (one the encompasses the origin-server), nor even one rooted in the search service path but instead is only the portion of the URL that would follow the '?' in the fully-formed URL.
     *
     * @return $this
     */
    public function setQuery($query)
    {
        if (!is_null($query) && (mb_strlen($query) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $query when calling SearchData., must be smaller than or equal to 1024.');
        }
        if (!is_null($query) && (mb_strlen($query) < 0)) {
            throw new \InvalidArgumentException('invalid length for $query when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets results
     *
     * @return string
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param string $results URL back to the site that executes the search and lands the user on the result page.
     *
     * @return $this
     */
    public function setResults($results)
    {
        if (!is_null($results) && (mb_strlen($results) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $results when calling SearchData., must be smaller than or equal to 1024.');
        }
        if (!is_null($results) && (mb_strlen($results) < 0)) {
            throw new \InvalidArgumentException('invalid length for $results when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets query_json
     *
     * @return string
     */
    public function getQueryJson()
    {
        return $this->container['query_json'];
    }

    /**
     * Sets query_json
     *
     * @param string $query_json A JSON object encapsulating a query that may be POST'd to a search service (point) for execution.
     *
     * @return $this
     */
    public function setQueryJson($query_json)
    {
        if (!is_null($query_json) && (mb_strlen($query_json) > 8096)) {
            throw new \InvalidArgumentException('invalid length for $query_json when calling SearchData., must be smaller than or equal to 8096.');
        }
        if (!is_null($query_json) && (mb_strlen($query_json) < 0)) {
            throw new \InvalidArgumentException('invalid length for $query_json when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['query_json'] = $query_json;

        return $this;
    }

    /**
     * Gets query_xml
     *
     * @return string
     */
    public function getQueryXml()
    {
        return $this->container['query_xml'];
    }

    /**
     * Sets query_xml
     *
     * @param string $query_xml An XML document encapsulating a query that may be POST'd to a search service (point) for execution.
     *
     * @return $this
     */
    public function setQueryXml($query_xml)
    {
        if (!is_null($query_xml) && (mb_strlen($query_xml) > 8096)) {
            throw new \InvalidArgumentException('invalid length for $query_xml when calling SearchData., must be smaller than or equal to 8096.');
        }
        if (!is_null($query_xml) && (mb_strlen($query_xml) < 0)) {
            throw new \InvalidArgumentException('invalid length for $query_xml when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['query_xml'] = $query_xml;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes To remind readers why the search was of interest or summary of results, etc.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 8096)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling SearchData., must be smaller than or equal to 8096.');
        }
        if (!is_null($notes) && (mb_strlen($notes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling SearchData., must be bigger than or equal to 0.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


