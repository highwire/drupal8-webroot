<?php
/**
 * AlertResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Model;

use \ArrayAccess;
use \PersonalizationClient\ObjectSerializer;

/**
 * AlertResource Class Doc Comment
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AlertResource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AlertResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'corpus' => '\PersonalizationClient\Model\ContentResource',
        'created' => 'string',
        'delivery' => 'string',
        'feature' => '\PersonalizationClient\Model\Feature',
        'frequency' => 'string',
        'interval_days' => 'int',
        'key' => 'int',
        'label' => 'string',
        'last_result' => 'string',
        'last_run' => 'string',
        'saved_search' => '\PersonalizationClient\Model\Feature',
        'status' => 'string',
        'status_updated' => 'string',
        'tracking' => '\PersonalizationClient\Model\ContentResource',
        'type' => 'string',
        'updated' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'corpus' => null,
        'created' => null,
        'delivery' => null,
        'feature' => null,
        'frequency' => null,
        'interval_days' => 'int32',
        'key' => 'int64',
        'label' => null,
        'last_result' => null,
        'last_run' => null,
        'saved_search' => null,
        'status' => null,
        'status_updated' => null,
        'tracking' => null,
        'type' => null,
        'updated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'corpus' => 'corpus',
        'created' => 'created',
        'delivery' => 'delivery',
        'feature' => 'feature',
        'frequency' => 'frequency',
        'interval_days' => 'interval-days',
        'key' => 'key',
        'label' => 'label',
        'last_result' => 'last-result',
        'last_run' => 'last-run',
        'saved_search' => 'saved-search',
        'status' => 'status',
        'status_updated' => 'status-updated',
        'tracking' => 'tracking',
        'type' => 'type',
        'updated' => 'updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'corpus' => 'setCorpus',
        'created' => 'setCreated',
        'delivery' => 'setDelivery',
        'feature' => 'setFeature',
        'frequency' => 'setFrequency',
        'interval_days' => 'setIntervalDays',
        'key' => 'setKey',
        'label' => 'setLabel',
        'last_result' => 'setLastResult',
        'last_run' => 'setLastRun',
        'saved_search' => 'setSavedSearch',
        'status' => 'setStatus',
        'status_updated' => 'setStatusUpdated',
        'tracking' => 'setTracking',
        'type' => 'setType',
        'updated' => 'setUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'corpus' => 'getCorpus',
        'created' => 'getCreated',
        'delivery' => 'getDelivery',
        'feature' => 'getFeature',
        'frequency' => 'getFrequency',
        'interval_days' => 'getIntervalDays',
        'key' => 'getKey',
        'label' => 'getLabel',
        'last_result' => 'getLastResult',
        'last_run' => 'getLastRun',
        'saved_search' => 'getSavedSearch',
        'status' => 'getStatus',
        'status_updated' => 'getStatusUpdated',
        'tracking' => 'getTracking',
        'type' => 'getType',
        'updated' => 'getUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_EMAIL = 'email';
    const DELIVERY_PUSH = 'push';
    const DELIVERY_SITE = 'site';
    const DELIVERY_SYNDICATION = 'syndication';
    const FREQUENCY_DAILY = 'daily';
    const FREQUENCY_WEEKLY = 'weekly';
    const FREQUENCY_BIWEEKLY = 'biweekly';
    const FREQUENCY_MONTHLY = 'monthly';
    const FREQUENCY_EVENT = 'event';
    const FREQUENCY_INTERVAL = 'interval';
    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    const STATUS_PAUSED = 'paused';
    const STATUS_AVAILABLE = 'available';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryAllowableValues()
    {
        return [
            self::DELIVERY_EMAIL,
            self::DELIVERY_PUSH,
            self::DELIVERY_SITE,
            self::DELIVERY_SYNDICATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_DAILY,
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_BIWEEKLY,
            self::FREQUENCY_MONTHLY,
            self::FREQUENCY_EVENT,
            self::FREQUENCY_INTERVAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_PAUSED,
            self::STATUS_AVAILABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['corpus'] = isset($data['corpus']) ? $data['corpus'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['feature'] = isset($data['feature']) ? $data['feature'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['interval_days'] = isset($data['interval_days']) ? $data['interval_days'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['last_result'] = isset($data['last_result']) ? $data['last_result'] : null;
        $this->container['last_run'] = isset($data['last_run']) ? $data['last_run'] : null;
        $this->container['saved_search'] = isset($data['saved_search']) ? $data['saved_search'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_updated'] = isset($data['status_updated']) ? $data['status_updated'] : null;
        $this->container['tracking'] = isset($data['tracking']) ? $data['tracking'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['delivery'] === null) {
            $invalidProperties[] = "'delivery' can't be null";
        }
        $allowedValues = $this->getDeliveryAllowableValues();
        if (!is_null($this->container['delivery']) && !in_array($this->container['delivery'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['last_run'] === null) {
            $invalidProperties[] = "'last_run' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status_updated'] === null) {
            $invalidProperties[] = "'status_updated' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets corpus
     *
     * @return \PersonalizationClient\Model\ContentResource
     */
    public function getCorpus()
    {
        return $this->container['corpus'];
    }

    /**
     * Sets corpus
     *
     * @param \PersonalizationClient\Model\ContentResource $corpus the body of content we're watching for changes.
     *
     * @return $this
     */
    public function setCorpus($corpus)
    {
        $this->container['corpus'] = $corpus;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created The date & time the entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return string
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param string $delivery How the alerts are to be delivered to the recipient.
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $allowedValues = $this->getDeliveryAllowableValues();
        if (!in_array($delivery, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets feature
     *
     * @return \PersonalizationClient\Model\Feature
     */
    public function getFeature()
    {
        return $this->container['feature'];
    }

    /**
     * Sets feature
     *
     * @param \PersonalizationClient\Model\Feature $feature Feature definitions & etting values for the specific alert type.
     *
     * @return $this
     */
    public function setFeature($feature)
    {
        $this->container['feature'] = $feature;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency Controlled intervals aligned with the corresponding downstream (Dominos) job. When the reader is in control, the value is <em>interval</em> and the alert's periodicity is controlled by <em>interval-days</em>.
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!in_array($frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets interval_days
     *
     * @return int
     */
    public function getIntervalDays()
    {
        return $this->container['interval_days'];
    }

    /**
     * Sets interval_days
     *
     * @param int $interval_days When frequency is <em>interval</em>, this is the number of days between executions of the alert. Eg, a value of 1 could lead to a daily alert whereas 7 could lead to a weekly alert.
     *
     * @return $this
     */
    public function setIntervalDays($interval_days)
    {
        $this->container['interval_days'] = $interval_days;

        return $this;
    }

    /**
     * Gets key
     *
     * @return int
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param int $key The numeric key assigned by the JPA repository.
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Alert label.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets last_result
     *
     * @return string
     */
    public function getLastResult()
    {
        return $this->container['last_result'];
    }

    /**
     * Sets last_result
     *
     * @param string $last_result The date & time the entity was last ran to successful completion.
     *
     * @return $this
     */
    public function setLastResult($last_result)
    {
        $this->container['last_result'] = $last_result;

        return $this;
    }

    /**
     * Gets last_run
     *
     * @return string
     */
    public function getLastRun()
    {
        return $this->container['last_run'];
    }

    /**
     * Sets last_run
     *
     * @param string $last_run The date & time the entity was last executed by system.
     *
     * @return $this
     */
    public function setLastRun($last_run)
    {
        $this->container['last_run'] = $last_run;

        return $this;
    }

    /**
     * Gets saved_search
     *
     * @return \PersonalizationClient\Model\Feature
     */
    public function getSavedSearch()
    {
        return $this->container['saved_search'];
    }

    /**
     * Sets saved_search
     *
     * @param \PersonalizationClient\Model\Feature $saved_search Setting values for a saved-search.
     *
     * @return $this
     */
    public function setSavedSearch($saved_search)
    {
        $this->container['saved_search'] = $saved_search;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Alert status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_updated
     *
     * @return string
     */
    public function getStatusUpdated()
    {
        return $this->container['status_updated'];
    }

    /**
     * Sets status_updated
     *
     * @param string $status_updated The date & time the <code>status</code> was changed.
     *
     * @return $this
     */
    public function setStatusUpdated($status_updated)
    {
        $this->container['status_updated'] = $status_updated;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \PersonalizationClient\Model\ContentResource
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \PersonalizationClient\Model\ContentResource $tracking The specific resource we're watching for changes.
     *
     * @return $this
     */
    public function setTracking($tracking)
    {
        $this->container['tracking'] = $tracking;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Alert type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string $updated The date & time the entity was updated.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


