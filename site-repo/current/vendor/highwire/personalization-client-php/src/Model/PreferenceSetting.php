<?php
/**
 * PreferenceSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Model;

use \ArrayAccess;
use \PersonalizationClient\ObjectSerializer;

/**
 * PreferenceSetting Class Doc Comment
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreferenceSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreferenceSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'empty' => 'bool',
        'preferences' => '\PersonalizationClient\Model\Preferences[]',
        'profile' => '\PersonalizationClient\Model\PreferenceProfile',
        'setting' => '\PersonalizationClient\Model\PreferenceProfileSetting',
        'setting_selector' => 'string',
        'setting_values' => 'string[]',
        'workspace' => '\PersonalizationClient\Model\Workspace'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'empty' => null,
        'preferences' => null,
        'profile' => null,
        'setting' => null,
        'setting_selector' => null,
        'setting_values' => null,
        'workspace' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'empty' => 'empty',
        'preferences' => 'preferences',
        'profile' => 'profile',
        'setting' => 'setting',
        'setting_selector' => 'setting-selector',
        'setting_values' => 'setting-values',
        'workspace' => 'workspace'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'empty' => 'setEmpty',
        'preferences' => 'setPreferences',
        'profile' => 'setProfile',
        'setting' => 'setSetting',
        'setting_selector' => 'setSettingSelector',
        'setting_values' => 'setSettingValues',
        'workspace' => 'setWorkspace'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'empty' => 'getEmpty',
        'preferences' => 'getPreferences',
        'profile' => 'getProfile',
        'setting' => 'getSetting',
        'setting_selector' => 'getSettingSelector',
        'setting_values' => 'getSettingValues',
        'workspace' => 'getWorkspace'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['empty'] = isset($data['empty']) ? $data['empty'] : null;
        $this->container['preferences'] = isset($data['preferences']) ? $data['preferences'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['setting'] = isset($data['setting']) ? $data['setting'] : null;
        $this->container['setting_selector'] = isset($data['setting_selector']) ? $data['setting_selector'] : null;
        $this->container['setting_values'] = isset($data['setting_values']) ? $data['setting_values'] : null;
        $this->container['workspace'] = isset($data['workspace']) ? $data['workspace'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['setting_selector']) && (mb_strlen($this->container['setting_selector']) > 32)) {
            $invalidProperties[] = "invalid value for 'setting_selector', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['setting_selector']) && (mb_strlen($this->container['setting_selector']) < 1)) {
            $invalidProperties[] = "invalid value for 'setting_selector', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['setting_selector']) && !preg_match("/[a-z0-9._\\-]+/", $this->container['setting_selector'])) {
            $invalidProperties[] = "invalid value for 'setting_selector', must be conform to the pattern /[a-z0-9._\\-]+/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets empty
     *
     * @return bool
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool $empty empty
     *
     * @return $this
     */
    public function setEmpty($empty)
    {
        $this->container['empty'] = $empty;

        return $this;
    }

    /**
     * Gets preferences
     *
     * @return \PersonalizationClient\Model\Preferences[]
     */
    public function getPreferences()
    {
        return $this->container['preferences'];
    }

    /**
     * Sets preferences
     *
     * @param \PersonalizationClient\Model\Preferences[] $preferences preferences
     *
     * @return $this
     */
    public function setPreferences($preferences)
    {
        $this->container['preferences'] = $preferences;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \PersonalizationClient\Model\PreferenceProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \PersonalizationClient\Model\PreferenceProfile $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets setting
     *
     * @return \PersonalizationClient\Model\PreferenceProfileSetting
     */
    public function getSetting()
    {
        return $this->container['setting'];
    }

    /**
     * Sets setting
     *
     * @param \PersonalizationClient\Model\PreferenceProfileSetting $setting setting
     *
     * @return $this
     */
    public function setSetting($setting)
    {
        $this->container['setting'] = $setting;

        return $this;
    }

    /**
     * Gets setting_selector
     *
     * @return string
     */
    public function getSettingSelector()
    {
        return $this->container['setting_selector'];
    }

    /**
     * Sets setting_selector
     *
     * @param string $setting_selector Setting selector
     *
     * @return $this
     */
    public function setSettingSelector($setting_selector)
    {
        if (!is_null($setting_selector) && (mb_strlen($setting_selector) > 32)) {
            throw new \InvalidArgumentException('invalid length for $setting_selector when calling PreferenceSetting., must be smaller than or equal to 32.');
        }
        if (!is_null($setting_selector) && (mb_strlen($setting_selector) < 1)) {
            throw new \InvalidArgumentException('invalid length for $setting_selector when calling PreferenceSetting., must be bigger than or equal to 1.');
        }
        if (!is_null($setting_selector) && (!preg_match("/[a-z0-9._\\-]+/", $setting_selector))) {
            throw new \InvalidArgumentException("invalid value for $setting_selector when calling PreferenceSetting., must conform to the pattern /[a-z0-9._\\-]+/.");
        }

        $this->container['setting_selector'] = $setting_selector;

        return $this;
    }

    /**
     * Gets setting_values
     *
     * @return string[]
     */
    public function getSettingValues()
    {
        return $this->container['setting_values'];
    }

    /**
     * Sets setting_values
     *
     * @param string[] $setting_values Setting values
     *
     * @return $this
     */
    public function setSettingValues($setting_values)
    {
        $this->container['setting_values'] = $setting_values;

        return $this;
    }

    /**
     * Gets workspace
     *
     * @return \PersonalizationClient\Model\Workspace
     */
    public function getWorkspace()
    {
        return $this->container['workspace'];
    }

    /**
     * Sets workspace
     *
     * @param \PersonalizationClient\Model\Workspace $workspace workspace
     *
     * @return $this
     */
    public function setWorkspace($workspace)
    {
        $this->container['workspace'] = $workspace;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


