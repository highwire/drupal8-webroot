<?php
/**
 * MarkedCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Personalization API
 *
 * Craig's <strong>best</strong> attempt at generated API documentation for web use.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cjurney@highwire.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PersonalizationClient\Model;

use \ArrayAccess;
use \PersonalizationClient\ObjectSerializer;

/**
 * MarkedCategory Class Doc Comment
 *
 * @category Class
 * @package  PersonalizationClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarkedCategory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MarkedCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label' => 'string',
        'scheme' => 'string',
        'taxonomy_node' => 'string',
        'term' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'label' => null,
        'scheme' => null,
        'taxonomy_node' => null,
        'term' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'scheme' => 'scheme',
        'taxonomy_node' => 'taxonomyNode',
        'term' => 'term'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'scheme' => 'setScheme',
        'taxonomy_node' => 'setTaxonomyNode',
        'term' => 'setTerm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'scheme' => 'getScheme',
        'taxonomy_node' => 'getTaxonomyNode',
        'term' => 'getTerm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
        $this->container['taxonomy_node'] = isset($data['taxonomy_node']) ? $data['taxonomy_node'] : null;
        $this->container['term'] = isset($data['term']) ? $data['term'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 256)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['label']) < 3)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['scheme'] === null) {
            $invalidProperties[] = "'scheme' can't be null";
        }
        if ((mb_strlen($this->container['scheme']) > 80)) {
            $invalidProperties[] = "invalid value for 'scheme', the character length must be smaller than or equal to 80.";
        }

        if ((mb_strlen($this->container['scheme']) < 3)) {
            $invalidProperties[] = "invalid value for 'scheme', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['taxonomy_node']) && (mb_strlen($this->container['taxonomy_node']) > 16)) {
            $invalidProperties[] = "invalid value for 'taxonomy_node', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['taxonomy_node']) && (mb_strlen($this->container['taxonomy_node']) < 8)) {
            $invalidProperties[] = "invalid value for 'taxonomy_node', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['term'] === null) {
            $invalidProperties[] = "'term' can't be null";
        }
        if ((mb_strlen($this->container['term']) > 80)) {
            $invalidProperties[] = "invalid value for 'term', the character length must be smaller than or equal to 80.";
        }

        if ((mb_strlen($this->container['term']) < 3)) {
            $invalidProperties[] = "invalid value for 'term', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The Taxonomy node or ACS category label, this is what the user sees.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 256)) {
            throw new \InvalidArgumentException('invalid length for $label when calling MarkedCategory., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($label) < 3)) {
            throw new \InvalidArgumentException('invalid length for $label when calling MarkedCategory., must be bigger than or equal to 3.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string $scheme Categorization scheme, eg, subject or product
     *
     * @return $this
     */
    public function setScheme($scheme)
    {
        if ((mb_strlen($scheme) > 80)) {
            throw new \InvalidArgumentException('invalid length for $scheme when calling MarkedCategory., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($scheme) < 3)) {
            throw new \InvalidArgumentException('invalid length for $scheme when calling MarkedCategory., must be bigger than or equal to 3.');
        }

        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets taxonomy_node
     *
     * @return string
     */
    public function getTaxonomyNode()
    {
        return $this->container['taxonomy_node'];
    }

    /**
     * Sets taxonomy_node
     *
     * @param string $taxonomy_node In the case where the Category is a node in a Taxonomy, the specific node of the tree is the value and <em>term</em> is taken from the Taxonomy node's term.
     *
     * @return $this
     */
    public function setTaxonomyNode($taxonomy_node)
    {
        if (!is_null($taxonomy_node) && (mb_strlen($taxonomy_node) > 16)) {
            throw new \InvalidArgumentException('invalid length for $taxonomy_node when calling MarkedCategory., must be smaller than or equal to 16.');
        }
        if (!is_null($taxonomy_node) && (mb_strlen($taxonomy_node) < 8)) {
            throw new \InvalidArgumentException('invalid length for $taxonomy_node when calling MarkedCategory., must be bigger than or equal to 8.');
        }

        $this->container['taxonomy_node'] = $taxonomy_node;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string $term Category term from the scheme.
     *
     * @return $this
     */
    public function setTerm($term)
    {
        if ((mb_strlen($term) > 80)) {
            throw new \InvalidArgumentException('invalid length for $term when calling MarkedCategory., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($term) < 3)) {
            throw new \InvalidArgumentException('invalid length for $term when calling MarkedCategory., must be bigger than or equal to 3.');
        }

        $this->container['term'] = $term;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


